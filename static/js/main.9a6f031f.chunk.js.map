{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","input","list","list_1","locationSelected","e","value","target","this","setState","queryString","axios","get","apiCall","console","log","data","matches","filter","result","name","country","regex","RegExp","match","className","type","placeholder","onChange","alertKeyPressed","fetchCountryFromJson","map","item","onClick","autocompleteFetchAPI","key","style","textTransform","weather","description","main","temp","weatherWidget","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yUA+IeA,G,8DAvIb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,GAAIC,iBAAkB,MAFjD,E,4DAMHC,GAAI,IACVC,EAAUD,EAAEE,OAAZD,MACRE,KAAKC,SAAS,CAAER,MAAOK,M,oFAGEI,G,uFACHC,IAAMC,IAAN,4DACiCF,EADjC,iE,OAAhBG,E,OAGNC,QAAQC,IAAIF,GACZL,KAAKC,SAAS,CAAEL,iBAAkBS,IAClCC,QAAQC,IAAIP,KAAKR,MAAMI,kB,+RAIAO,IAAMC,IAAI,kB,gBAAzBI,E,EAAAA,KACJC,EAAUD,EAAKE,QAAO,SAACC,GAAY,IAC7BC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QACRC,EAAQ,IAAIC,OAAJ,WAAe,EAAKvB,MAAMC,OAAS,MACjD,OAAOmB,EAAKI,MAAMF,IAAUD,EAAQG,MAAMF,MAEnB,KAArBd,KAAKR,MAAMC,QACbgB,EAAU,IAEZT,KAAKC,SAAS,CAAEP,KAAMe,I,qIAId,IAAD,OAsDP,OACE,6BAUE,yBAAKQ,UAAU,aACb,2BACEC,KAAK,OACLD,UAAU,eACVE,YAAY,yBACZC,SAAU,SAACvB,GAAD,OACR,EAAKwB,gBAAgBxB,GAAI,EAAKyB,0BAGlC,yBAAKL,UAAU,eACZjB,KAAKR,MAAME,KAAK6B,KAAI,SAACC,GAAD,OACnB,yBACEC,QAAS,SAAC5B,GAAD,OAAO,EAAK6B,qBAAqBF,EAAKZ,OAC/Ce,IAAKH,EAAKZ,MAETY,EAAKZ,WAMmB,OAAhCZ,KAAKR,MAAMI,kBACV,6BACE,4BAAKI,KAAKR,MAAMI,iBAAiBY,KAAKI,MACtC,wBAAIgB,MAAO,CAAEC,cAAe,eACzB7B,KAAKR,MAAMI,iBAAiBY,KAAKsB,QAAQ,GAAGC,aAE/C,4BAAK/B,KAAKR,MAAMI,iBAAiBY,KAAKwB,KAAKC,KAA3C,mBA3Fc,WACpB,GAAoC,OAAhC,EAAKzC,MAAMI,iBACb,OAAQ,EAAKJ,MAAMI,iBAAiBY,KAAKsB,QAAQ,GAAGE,MAClD,IAAK,SACH,OACE,6BACE,yBAAKf,UAAU,eACb,yBAAKA,UAAU,UACf,yBAAKA,UAAU,YAIvB,IAAK,OACH,OACE,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,UACf,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UAEjB,yBAAKA,UAAU,UAGrB,IAAK,eACH,OACE,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,UACf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACf,yBAAKA,UAAU,WAIvB,IAAK,UACH,OACE,yBAAKA,UAAU,cACb,yBAAKA,UAAU,UACf,yBAAKA,UAAU,UAGrB,IAAK,QACH,OACE,yBAAKA,UAAU,cACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,WAIvB,QACE,OAAO,mCA4CNiB,S,GAhIKC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvB,MACvB,2DCZNwB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.9a6f031f.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\r\nimport { Typeahead } from \"react-bootstrap-typeahead\";\r\nimport axios from \"axios\";\r\nimport \"./index.css\";\r\nimport \"./App.css\";\r\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { input: \"\", list: [], list_1: [], locationSelected: null };\r\n  }\r\n\r\n  ////////////////////////////////////////////////////////////////\r\n  alertKeyPressed(e) {\r\n    const { value } = e.target;\r\n    this.setState({ input: value });\r\n  }\r\n\r\n  async autocompleteFetchAPI(queryString) {\r\n    const apiCall = await axios.get(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${queryString}&APPID=a521f0aa99ef371340547b3d5c2a1833&lang=vi&units=metric`\r\n    );\r\n    console.log(apiCall);\r\n    this.setState({ locationSelected: apiCall });\r\n    console.log(this.state.locationSelected);\r\n  }\r\n\r\n  async fetchCountryFromJson() {\r\n    const { data } = await axios.get(\"city_list.json\");\r\n    let matches = data.filter((result) => {\r\n      const { name, country } = result;\r\n      const regex = new RegExp(`^${this.state.input}`, \"gi\");\r\n      return name.match(regex) || country.match(regex);\r\n    });\r\n    if (this.state.input === \"\") {\r\n      matches = [];\r\n    }\r\n    this.setState({ list: matches });\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////////////////////////\r\n  render() {\r\n    const weatherWidget = () => {\r\n      if (this.state.locationSelected !== null) {\r\n        switch (this.state.locationSelected.data.weather[0].main) {\r\n          case \"Clouds\":\r\n            return (\r\n              <div>\r\n                <div className=\"icon cloudy\">\r\n                  <div className=\"cloud\"></div>\r\n                  <div className=\"cloud\"></div>\r\n                </div>\r\n              </div>\r\n            );\r\n          case \"Rain\":\r\n            return (\r\n              <div className=\"icon sun-shower\">\r\n                <div className=\"cloud\"></div>\r\n                <div className=\"sun\">\r\n                  <div className=\"rays\"></div>\r\n                </div>\r\n                <div className=\"rain\"></div>\r\n              </div>\r\n            );\r\n          case \"Thunderstorm\":\r\n            return (\r\n              <div className=\"icon thunder-storm\">\r\n                <div className=\"cloud\"></div>\r\n                <div className=\"lightning\">\r\n                  <div className=\"bolt\"></div>\r\n                  <div className=\"bolt\"></div>\r\n                </div>\r\n              </div>\r\n            );\r\n          case \"Drizzle\":\r\n            return (\r\n              <div className=\"icon rainy\">\r\n                <div className=\"cloud\"></div>\r\n                <div className=\"rain\"></div>\r\n              </div>\r\n            );\r\n          case \"Clear\":\r\n            return (\r\n              <div className=\"icon sunny\">\r\n                <div className=\"sun\">\r\n                  <div className=\"rays\"></div>\r\n                </div>\r\n              </div>\r\n            );\r\n          default:\r\n            return <h1>CC</h1>;\r\n        }\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        {/* <Typeahead\r\n          id=\"basic-typeahead-single\"\r\n          labelKey=\"name\"\r\n          style={{ width: \"300px\" }}\r\n          options={this.state.list_1}\r\n          minLength=\"3\"\r\n          placeholder=\"Choose a state...\"\r\n        /> */}\r\n\r\n        <div className=\"container\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-input\"\r\n            placeholder=\"Enter state of America\"\r\n            onChange={(e) => (\r\n              this.alertKeyPressed(e), this.fetchCountryFromJson()\r\n            )}\r\n          />\r\n          <div className=\"suggestions\">\r\n            {this.state.list.map((item) => (\r\n              <div\r\n                onClick={(e) => this.autocompleteFetchAPI(item.name)}\r\n                key={item.name}\r\n              >\r\n                {item.name}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {this.state.locationSelected !== null && (\r\n          <div>\r\n            <h1>{this.state.locationSelected.data.name}</h1>\r\n            <h1 style={{ textTransform: \"capitalize\" }}>\r\n              {this.state.locationSelected.data.weather[0].description}\r\n            </h1>\r\n            <h1>{this.state.locationSelected.data.main.temp} Độ C</h1>\r\n            {weatherWidget()}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}